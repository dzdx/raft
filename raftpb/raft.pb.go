// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

/*
Package raftpb is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	LastVoted
	RequestVoteReq
	RequestVoteResp
	LogEntry
	AppendEntriesReq
	AppendEntriesResp
	InstallSnapshotReq
	InstallSnapshotResp
	ConfChange
	Node
	Configuration
*/
package raftpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeRole int32

const (
	NodeRole_Voter NodeRole = 0
)

var NodeRole_name = map[int32]string{
	0: "Voter",
}
var NodeRole_value = map[string]int32{
	"Voter": 0,
}

func (x NodeRole) String() string {
	return proto.EnumName(NodeRole_name, int32(x))
}
func (NodeRole) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LogEntry_LogType int32

const (
	LogEntry_LogCommand LogEntry_LogType = 0
	LogEntry_LogNoop    LogEntry_LogType = 1
	LogEntry_LogConf    LogEntry_LogType = 2
)

var LogEntry_LogType_name = map[int32]string{
	0: "LogCommand",
	1: "LogNoop",
	2: "LogConf",
}
var LogEntry_LogType_value = map[string]int32{
	"LogCommand": 0,
	"LogNoop":    1,
	"LogConf":    2,
}

func (x LogEntry_LogType) String() string {
	return proto.EnumName(LogEntry_LogType_name, int32(x))
}
func (LogEntry_LogType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type ConfChange_Type int32

const (
	ConfChange_AddNode    ConfChange_Type = 0
	ConfChange_RemoveNode ConfChange_Type = 1
)

var ConfChange_Type_name = map[int32]string{
	0: "AddNode",
	1: "RemoveNode",
}
var ConfChange_Type_value = map[string]int32{
	"AddNode":    0,
	"RemoveNode": 1,
}

func (x ConfChange_Type) String() string {
	return proto.EnumName(ConfChange_Type_name, int32(x))
}
func (ConfChange_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

type LastVoted struct {
	VotedFor  string `protobuf:"bytes,1,opt,name=votedFor" json:"votedFor,omitempty"`
	VotedTerm uint64 `protobuf:"varint,2,opt,name=votedTerm" json:"votedTerm,omitempty"`
}

func (m *LastVoted) Reset()                    { *m = LastVoted{} }
func (m *LastVoted) String() string            { return proto.CompactTextString(m) }
func (*LastVoted) ProtoMessage()               {}
func (*LastVoted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LastVoted) GetVotedFor() string {
	if m != nil {
		return m.VotedFor
	}
	return ""
}

func (m *LastVoted) GetVotedTerm() uint64 {
	if m != nil {
		return m.VotedTerm
	}
	return 0
}

type RequestVoteReq struct {
	Term         uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LastLogIndex uint64 `protobuf:"varint,2,opt,name=lastLogIndex" json:"lastLogIndex,omitempty"`
	LastLogTerm  uint64 `protobuf:"varint,3,opt,name=lastLogTerm" json:"lastLogTerm,omitempty"`
	CandidateID  string `protobuf:"bytes,4,opt,name=candidateID" json:"candidateID,omitempty"`
}

func (m *RequestVoteReq) Reset()                    { *m = RequestVoteReq{} }
func (m *RequestVoteReq) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteReq) ProtoMessage()               {}
func (*RequestVoteReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RequestVoteReq) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteReq) GetLastLogIndex() uint64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVoteReq) GetLastLogTerm() uint64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

func (m *RequestVoteReq) GetCandidateID() string {
	if m != nil {
		return m.CandidateID
	}
	return ""
}

type RequestVoteResp struct {
	Term        uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	VoteGranted bool   `protobuf:"varint,2,opt,name=voteGranted" json:"voteGranted,omitempty"`
}

func (m *RequestVoteResp) Reset()                    { *m = RequestVoteResp{} }
func (m *RequestVoteResp) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResp) ProtoMessage()               {}
func (*RequestVoteResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RequestVoteResp) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteResp) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

type LogEntry struct {
	Term    uint64           `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Index   uint64           `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Data    []byte           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	LogType LogEntry_LogType `protobuf:"varint,4,opt,name=logType,enum=raftpb.LogEntry_LogType" json:"logType,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LogEntry) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LogEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogEntry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LogEntry) GetLogType() LogEntry_LogType {
	if m != nil {
		return m.LogType
	}
	return LogEntry_LogCommand
}

type AppendEntriesReq struct {
	Term              uint64      `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LeaderID          string      `protobuf:"bytes,2,opt,name=leaderID" json:"leaderID,omitempty"`
	PrevLogIndex      uint64      `protobuf:"varint,3,opt,name=prevLogIndex" json:"prevLogIndex,omitempty"`
	PrevLogTerm       uint64      `protobuf:"varint,4,opt,name=prevLogTerm" json:"prevLogTerm,omitempty"`
	LeaderCommitIndex uint64      `protobuf:"varint,6,opt,name=leaderCommitIndex" json:"leaderCommitIndex,omitempty"`
	Entries           []*LogEntry `protobuf:"bytes,5,rep,name=entries" json:"entries,omitempty"`
}

func (m *AppendEntriesReq) Reset()                    { *m = AppendEntriesReq{} }
func (m *AppendEntriesReq) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesReq) ProtoMessage()               {}
func (*AppendEntriesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AppendEntriesReq) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesReq) GetLeaderID() string {
	if m != nil {
		return m.LeaderID
	}
	return ""
}

func (m *AppendEntriesReq) GetPrevLogIndex() uint64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesReq) GetPrevLogTerm() uint64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesReq) GetLeaderCommitIndex() uint64 {
	if m != nil {
		return m.LeaderCommitIndex
	}
	return 0
}

func (m *AppendEntriesReq) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AppendEntriesResp struct {
	Term         uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Success      bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	LastLogIndex uint64 `protobuf:"varint,3,opt,name=lastLogIndex" json:"lastLogIndex,omitempty"`
}

func (m *AppendEntriesResp) Reset()                    { *m = AppendEntriesResp{} }
func (m *AppendEntriesResp) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResp) ProtoMessage()               {}
func (*AppendEntriesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AppendEntriesResp) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AppendEntriesResp) GetLastLogIndex() uint64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

type InstallSnapshotReq struct {
	Term      uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LeaderID  string `protobuf:"bytes,2,opt,name=leaderID" json:"leaderID,omitempty"`
	LastIndex uint64 `protobuf:"varint,3,opt,name=lastIndex" json:"lastIndex,omitempty"`
	LastTerm  uint64 `protobuf:"varint,4,opt,name=lastTerm" json:"lastTerm,omitempty"`
	Offset    uint64 `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	Data      []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Done      bool   `protobuf:"varint,7,opt,name=done" json:"done,omitempty"`
}

func (m *InstallSnapshotReq) Reset()                    { *m = InstallSnapshotReq{} }
func (m *InstallSnapshotReq) String() string            { return proto.CompactTextString(m) }
func (*InstallSnapshotReq) ProtoMessage()               {}
func (*InstallSnapshotReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *InstallSnapshotReq) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *InstallSnapshotReq) GetLeaderID() string {
	if m != nil {
		return m.LeaderID
	}
	return ""
}

func (m *InstallSnapshotReq) GetLastIndex() uint64 {
	if m != nil {
		return m.LastIndex
	}
	return 0
}

func (m *InstallSnapshotReq) GetLastTerm() uint64 {
	if m != nil {
		return m.LastTerm
	}
	return 0
}

func (m *InstallSnapshotReq) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *InstallSnapshotReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *InstallSnapshotReq) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type InstallSnapshotResp struct {
	Term    uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *InstallSnapshotResp) Reset()                    { *m = InstallSnapshotResp{} }
func (m *InstallSnapshotResp) String() string            { return proto.CompactTextString(m) }
func (*InstallSnapshotResp) ProtoMessage()               {}
func (*InstallSnapshotResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *InstallSnapshotResp) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *InstallSnapshotResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ConfChange struct {
	Type     ConfChange_Type `protobuf:"varint,1,opt,name=type,enum=raftpb.ConfChange_Type" json:"type,omitempty"`
	Role     NodeRole        `protobuf:"varint,2,opt,name=role,enum=raftpb.NodeRole" json:"role,omitempty"`
	ServerID string          `protobuf:"bytes,3,opt,name=serverID" json:"serverID,omitempty"`
}

func (m *ConfChange) Reset()                    { *m = ConfChange{} }
func (m *ConfChange) String() string            { return proto.CompactTextString(m) }
func (*ConfChange) ProtoMessage()               {}
func (*ConfChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ConfChange) GetType() ConfChange_Type {
	if m != nil {
		return m.Type
	}
	return ConfChange_AddNode
}

func (m *ConfChange) GetRole() NodeRole {
	if m != nil {
		return m.Role
	}
	return NodeRole_Voter
}

func (m *ConfChange) GetServerID() string {
	if m != nil {
		return m.ServerID
	}
	return ""
}

type Node struct {
	Role     NodeRole `protobuf:"varint,1,opt,name=role,enum=raftpb.NodeRole" json:"role,omitempty"`
	ServerID string   `protobuf:"bytes,2,opt,name=serverID" json:"serverID,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Node) GetRole() NodeRole {
	if m != nil {
		return m.Role
	}
	return NodeRole_Voter
}

func (m *Node) GetServerID() string {
	if m != nil {
		return m.ServerID
	}
	return ""
}

type Configuration struct {
	Index uint64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Nodes []*Node `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *Configuration) Reset()                    { *m = Configuration{} }
func (m *Configuration) String() string            { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()               {}
func (*Configuration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Configuration) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Configuration) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*LastVoted)(nil), "raftpb.LastVoted")
	proto.RegisterType((*RequestVoteReq)(nil), "raftpb.RequestVoteReq")
	proto.RegisterType((*RequestVoteResp)(nil), "raftpb.RequestVoteResp")
	proto.RegisterType((*LogEntry)(nil), "raftpb.LogEntry")
	proto.RegisterType((*AppendEntriesReq)(nil), "raftpb.AppendEntriesReq")
	proto.RegisterType((*AppendEntriesResp)(nil), "raftpb.AppendEntriesResp")
	proto.RegisterType((*InstallSnapshotReq)(nil), "raftpb.InstallSnapshotReq")
	proto.RegisterType((*InstallSnapshotResp)(nil), "raftpb.InstallSnapshotResp")
	proto.RegisterType((*ConfChange)(nil), "raftpb.ConfChange")
	proto.RegisterType((*Node)(nil), "raftpb.Node")
	proto.RegisterType((*Configuration)(nil), "raftpb.Configuration")
	proto.RegisterEnum("raftpb.NodeRole", NodeRole_name, NodeRole_value)
	proto.RegisterEnum("raftpb.LogEntry_LogType", LogEntry_LogType_name, LogEntry_LogType_value)
	proto.RegisterEnum("raftpb.ConfChange_Type", ConfChange_Type_name, ConfChange_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RaftService service

type RaftServiceClient interface {
	RequestVote(ctx context.Context, in *RequestVoteReq, opts ...grpc.CallOption) (*RequestVoteResp, error)
	AppendEntries(ctx context.Context, in *AppendEntriesReq, opts ...grpc.CallOption) (*AppendEntriesResp, error)
	InstallSnapshot(ctx context.Context, in *InstallSnapshotReq, opts ...grpc.CallOption) (*InstallSnapshotResp, error)
}

type raftServiceClient struct {
	cc *grpc.ClientConn
}

func NewRaftServiceClient(cc *grpc.ClientConn) RaftServiceClient {
	return &raftServiceClient{cc}
}

func (c *raftServiceClient) RequestVote(ctx context.Context, in *RequestVoteReq, opts ...grpc.CallOption) (*RequestVoteResp, error) {
	out := new(RequestVoteResp)
	err := grpc.Invoke(ctx, "/raftpb.RaftService/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) AppendEntries(ctx context.Context, in *AppendEntriesReq, opts ...grpc.CallOption) (*AppendEntriesResp, error) {
	out := new(AppendEntriesResp)
	err := grpc.Invoke(ctx, "/raftpb.RaftService/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) InstallSnapshot(ctx context.Context, in *InstallSnapshotReq, opts ...grpc.CallOption) (*InstallSnapshotResp, error) {
	out := new(InstallSnapshotResp)
	err := grpc.Invoke(ctx, "/raftpb.RaftService/InstallSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RaftService service

type RaftServiceServer interface {
	RequestVote(context.Context, *RequestVoteReq) (*RequestVoteResp, error)
	AppendEntries(context.Context, *AppendEntriesReq) (*AppendEntriesResp, error)
	InstallSnapshot(context.Context, *InstallSnapshotReq) (*InstallSnapshotResp, error)
}

func RegisterRaftServiceServer(s *grpc.Server, srv RaftServiceServer) {
	s.RegisterService(&_RaftService_serviceDesc, srv)
}

func _RaftService_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raftpb.RaftService/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).RequestVote(ctx, req.(*RequestVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raftpb.RaftService/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).AppendEntries(ctx, req.(*AppendEntriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_InstallSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallSnapshotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).InstallSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raftpb.RaftService/InstallSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).InstallSnapshot(ctx, req.(*InstallSnapshotReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raftpb.RaftService",
	HandlerType: (*RaftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _RaftService_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _RaftService_AppendEntries_Handler,
		},
		{
			MethodName: "InstallSnapshot",
			Handler:    _RaftService_InstallSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 688 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdd, 0x4e, 0xdb, 0x4a,
	0x10, 0x66, 0x89, 0xf3, 0x37, 0x81, 0x10, 0xf6, 0x9c, 0x03, 0x3e, 0x39, 0x5c, 0x44, 0x7b, 0x7a,
	0x81, 0x68, 0x95, 0x8b, 0x70, 0x5f, 0x09, 0x05, 0x4a, 0x53, 0x45, 0x5c, 0x18, 0xd4, 0xfb, 0x25,
	0x9e, 0x04, 0x4b, 0x8e, 0xd7, 0x78, 0x97, 0xa8, 0xbc, 0x43, 0x1f, 0xa2, 0xaf, 0xd0, 0x17, 0xe8,
	0xab, 0x54, 0xea, 0x93, 0x54, 0x3b, 0xfe, 0x89, 0x93, 0x10, 0xa9, 0xed, 0xdd, 0xcc, 0x37, 0x9f,
	0x67, 0x66, 0xe7, 0x9b, 0x5d, 0x03, 0x24, 0x72, 0x6a, 0xfa, 0x71, 0xa2, 0x8c, 0xe2, 0x35, 0x6b,
	0xc7, 0xf7, 0xe2, 0x0a, 0x9a, 0x63, 0xa9, 0xcd, 0x47, 0x65, 0xd0, 0xe7, 0x5d, 0x68, 0x2c, 0xac,
	0xf1, 0x4e, 0x25, 0x2e, 0xeb, 0xb1, 0xd3, 0xa6, 0x57, 0xf8, 0xfc, 0x04, 0x9a, 0x64, 0xdf, 0x61,
	0x32, 0x77, 0x77, 0x7b, 0xec, 0xd4, 0xf1, 0x96, 0x80, 0xf8, 0xcc, 0xa0, 0xed, 0xe1, 0xe3, 0x13,
	0xa6, 0xa9, 0x3c, 0x7c, 0xe4, 0x1c, 0x1c, 0x63, 0xb9, 0x8c, 0xb8, 0x64, 0x73, 0x01, 0x7b, 0xa1,
	0xd4, 0x66, 0xac, 0x66, 0xa3, 0xc8, 0xc7, 0x4f, 0x59, 0x9e, 0x15, 0x8c, 0xf7, 0xa0, 0x95, 0xf9,
	0x54, 0xaa, 0x42, 0x94, 0x32, 0x64, 0x19, 0x13, 0x19, 0xf9, 0x81, 0x2f, 0x0d, 0x8e, 0x2e, 0x5d,
	0x87, 0x3a, 0x2d, 0x43, 0xe2, 0x1a, 0x0e, 0x56, 0xba, 0xd1, 0xf1, 0x8b, 0xed, 0xf4, 0xa0, 0x65,
	0x8f, 0x70, 0x9d, 0xc8, 0xc8, 0xa0, 0x4f, 0xdd, 0x34, 0xbc, 0x32, 0x24, 0xbe, 0x32, 0x68, 0x8c,
	0xd5, 0xec, 0x2a, 0x32, 0xc9, 0xf3, 0x8b, 0x29, 0xfe, 0x86, 0x6a, 0x50, 0x3a, 0x4a, 0xea, 0x58,
	0xa6, 0x2f, 0x8d, 0xa4, 0xe6, 0xf7, 0x3c, 0xb2, 0xf9, 0x00, 0xea, 0xa1, 0x9a, 0xdd, 0x3d, 0xc7,
	0x48, 0x1d, 0xb7, 0x07, 0x6e, 0x3f, 0xd5, 0xa0, 0x9f, 0x17, 0xb0, 0x86, 0x8d, 0x7b, 0x39, 0x51,
	0x9c, 0x43, 0x3d, 0xc3, 0x78, 0x1b, 0x60, 0xac, 0x66, 0x43, 0x35, 0x9f, 0xcb, 0xc8, 0xef, 0xec,
	0xf0, 0x16, 0x85, 0x6e, 0x94, 0x8a, 0x3b, 0x2c, 0x73, 0x86, 0x2a, 0x9a, 0x76, 0x76, 0xc5, 0x0f,
	0x06, 0x9d, 0x8b, 0x38, 0xc6, 0xc8, 0xb7, 0x59, 0x03, 0xd4, 0xdb, 0xd4, 0xe8, 0x42, 0x23, 0x44,
	0xe9, 0x63, 0x32, 0xba, 0xa4, 0xf6, 0x9b, 0x5e, 0xe1, 0x5b, 0xa5, 0xe2, 0x04, 0x17, 0x85, 0x52,
	0xa9, 0x0c, 0x2b, 0x98, 0x1d, 0x5f, 0xe6, 0x93, 0x52, 0x4e, 0xaa, 0x54, 0x09, 0xe2, 0x6f, 0xe0,
	0x30, 0xcd, 0x68, 0xfb, 0x0e, 0x4c, 0x9a, 0xaa, 0x46, 0xbc, 0xcd, 0x00, 0x3f, 0x83, 0x3a, 0xa6,
	0x1d, 0xbb, 0xd5, 0x5e, 0xe5, 0xb4, 0x35, 0xe8, 0xac, 0x4f, 0xc8, 0xcb, 0x09, 0x02, 0xe1, 0x70,
	0xed, 0x8c, 0x5b, 0x34, 0x76, 0xa1, 0xae, 0x9f, 0x26, 0x13, 0xd4, 0x3a, 0xd3, 0x37, 0x77, 0x37,
	0x96, 0xb1, 0xb2, 0xb9, 0x8c, 0xe2, 0x1b, 0x03, 0x3e, 0x8a, 0xb4, 0x91, 0x61, 0x78, 0x1b, 0xc9,
	0x58, 0x3f, 0x28, 0xf3, 0x27, 0xd3, 0x3c, 0x81, 0xa6, 0x4d, 0x5b, 0xae, 0xb3, 0x04, 0xe8, 0x4b,
	0xa9, 0x4d, 0x69, 0x88, 0x85, 0xcf, 0x8f, 0xa0, 0xa6, 0xa6, 0x53, 0x8d, 0xc6, 0xad, 0x52, 0x24,
	0xf3, 0x8a, 0x0d, 0xab, 0x95, 0x36, 0xcc, 0x62, 0x2a, 0x42, 0xb7, 0x4e, 0xe7, 0x24, 0x5b, 0x0c,
	0xe1, 0xaf, 0x8d, 0xfe, 0x7f, 0x77, 0x52, 0xe2, 0x0b, 0x03, 0xb0, 0xcb, 0x35, 0x7c, 0x90, 0xd1,
	0x0c, 0xf9, 0x6b, 0x70, 0x8c, 0x5d, 0x63, 0x46, 0x6b, 0x7c, 0x9c, 0x8b, 0xb4, 0x64, 0xf4, 0x69,
	0x8b, 0x89, 0xc4, 0x5f, 0x81, 0x93, 0xa8, 0x10, 0x29, 0x65, 0x7b, 0xa9, 0xe8, 0x8d, 0xf2, 0xd1,
	0x53, 0x21, 0x7a, 0x14, 0xb5, 0x23, 0xd0, 0x98, 0x2c, 0x68, 0x78, 0x95, 0x74, 0x78, 0xb9, 0x2f,
	0xfe, 0x07, 0x87, 0x6e, 0x40, 0x0b, 0xea, 0x17, 0xbe, 0x6f, 0x3f, 0xec, 0xec, 0xd8, 0xeb, 0xe0,
	0xe1, 0x5c, 0x2d, 0x90, 0x7c, 0x26, 0xde, 0x83, 0x63, 0xad, 0xa2, 0x1c, 0xfb, 0xe5, 0x72, 0xbb,
	0x6b, 0xe5, 0x46, 0xb0, 0x6f, 0x4f, 0x12, 0xcc, 0x9e, 0x12, 0x69, 0x02, 0x15, 0x2d, 0xaf, 0x38,
	0x2b, 0x5f, 0x71, 0x01, 0xd5, 0x48, 0xf9, 0x68, 0x67, 0x65, 0x57, 0x75, 0x6f, 0xa5, 0x52, 0x1a,
	0x3a, 0xfb, 0x07, 0x1a, 0x79, 0x61, 0xde, 0x84, 0xaa, 0x7d, 0x8b, 0x92, 0xce, 0xce, 0xe0, 0x3b,
	0x83, 0x96, 0x27, 0xa7, 0xe6, 0x16, 0x93, 0x45, 0x30, 0x41, 0xfe, 0x16, 0x5a, 0xa5, 0xd7, 0x8a,
	0x1f, 0xe5, 0xa9, 0x56, 0x1f, 0xd4, 0xee, 0xf1, 0x8b, 0xb8, 0x8e, 0xf9, 0x25, 0xec, 0xaf, 0xdc,
	0x05, 0x5e, 0xbc, 0x2c, 0xeb, 0xcf, 0x40, 0xf7, 0xdf, 0x2d, 0x11, 0x1d, 0xf3, 0x0f, 0x70, 0xb0,
	0xb6, 0x29, 0xbc, 0x9b, 0xb3, 0x37, 0xaf, 0x40, 0xf7, 0xbf, 0xad, 0x31, 0x1d, 0xdf, 0xd7, 0xe8,
	0x27, 0x73, 0xfe, 0x33, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x46, 0x53, 0xad, 0x72, 0x06, 0x00, 0x00,
}
